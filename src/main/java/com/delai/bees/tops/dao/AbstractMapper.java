package com.delai.bees.tops.dao;

import com.github.miemiedev.mybatis.paginator.domain.PageBounds;
import org.apache.ibatis.annotations.Param;

import java.util.List;
import java.util.Map;

/**
 * 请描述类 <br>
 *
 * @author ryan wu
 * <p>
 * Created by ryan wu on 2019/3/16.
 */
public interface AbstractMapper<T, K extends java.io.Serializable> {
    /**
     * 根据主键列表删除
     *
     * @param records 待删除记录的主键列表
     * @return 删除的记录数目
     */
    int deleteByIds(@Param("records") List records);

    /**
     * 匹配判断
     *
     * @param record 待匹配Domain对象
     * @return 记录是否存在
     */
    boolean exist(@Param("record") T record);

    /**
     * 判断主键是否存在
     * @param record 主键
     * @return 记录是否存在
     */
    boolean existPrimaryKey(@Param("id") K record);

    /**
     * 根据主键删除数据
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table book_comment
     *
     * @param id 记录主键
     * @return 删除记录数目
     */
    int deleteByPrimaryKey(K id);

    /**
     * 插入数据
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table book_comment
     *
     * @param record 带插入Domain对象
     * @return 插入记录数目
     */
    int insert(T record);

    /**
     * 动态插入数据
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table book_comment
     *
     * @param record 待处理对象/忽略空属性
     * @return 插入记录数目
     */
    int insertSelective(T record);

    /**
     * 动态插入数据 / 索引冲突更新
     *
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table book_comment
     *
     * @param record Domain对象/忽略空属性，主键冲突更新属性
     * @return 插入记录数目
     */
    @Deprecated
    int insertSelectiveIgnore(@Param("record") T record);

    /**
     * 获取所有数据
     * @return Domain对象列表
     */
    List<T> findAll();


    /**
     * 分页获取所有数据
     * @param bounds 分页对象
     * @return Domain对象列表
     */
    List<T> findAll(PageBounds bounds);
    /**
     * 分页获取数据
     * @param bounds 分页对象
     * @return Domain对象列表
     */
    @Deprecated
    List<T> find(PageBounds bounds);

    /**
     * 根据主键列表获取数据
     * @param ids 主键列表
     * @return Domain对象列表
     */
    List<T> findByIds(@Param("ids") List ids);

    /**
     * 分页根据主键列表获取数据
     * @param ids 主键列表
     * @param bounds 分页对象
     * @return Domain对象列表
     */
    List<T> findByIds(@Param("ids") List ids, PageBounds bounds);

    /**
     * 匹配查询
     * @param record 待匹配Domain对象
     * @return Domain对象列表
     */
    List<T> query(@Param("record") T record);

    /**
     * 分页, 匹配查询
     * @param record 待查询Domain对象
     * @param bounds 分页对象
     * @return Domain对象列表
     */
    List<T> query(@Param("record") T record, PageBounds bounds);


    /**
     * 模糊查询
     * @param record 待查询Domain对象
     * @return Domain对象列表
     */
    List<T> search(@Param("record") T record);

    /**
     * 分页, 模糊查询
     * @param record 待查询Domain对象
     * @param bounds 分页对象
     * @return Domain对象列表
     */
    List<T> search(@Param("record") T record, PageBounds bounds);

    /**
     * 匹配, 统计记录数
     * @param record 待匹配Domain对象
     * @return 匹配记录数目
     */
    Integer count(@Param("record") T record);

    /**
     * 执行SQL语句
     * @param sql SQL语句
     * @return SQL查询结果
     */
    List<Map> sql(@Param("sql") String sql);

    /**
     * 根据主键获取记录
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table book_comment
     *
     * @param id 主键
     * @return Domain对象
     */
    T selectByPrimaryKey(K id);

    /**
     * 根据主键, 动态更新记录
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table book_comment
     *
     * @param record 待更新Domain对象/忽略空属性更新
     * @return 更新记录数目
     */
    int updateByPrimaryKeySelective(T record);

    /**
     * 根据主键, 更新记录
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table book_comment
     *
     * @param record 待更新Domain对象
     * @return 更新记录数目
     */
    int updateByPrimaryKey(T record);

    /**
     * 根据条件, 获取记录
     * @param condition SQL条件 where 1= 1 and ${condition}
     * @return Domain对象列表
     */
    List<T> condition(@Param("condition") String condition);

    /**
     * 分页, 根据条件, 获取记录
     * @param condition SQL条件 where 1= 1 and ${condition}
     * @param bounds 分页对象
     * @return Domain对象列表
     */
    List<T> condition(@Param("condition") String condition, PageBounds bounds);


    /**
     * 条件匹配
     * @param record
     * @param condition
     * @return
     */
    List<T> qcondition(@Param("record") T record, @Param("condition") String condition);

    /**
     * 条件匹配
     * @param record
     * @param condition
     * @param bounds
     * @return
     */
    List<T> qcondition(@Param("record") T record, @Param("condition") String condition, PageBounds bounds );

    /**
     * 条件搜索
     * @param record
     * @param condition
     * @return
     */
    List<T> scondition(@Param("record") T record, @Param("condition") String condition);

    /**
     * 条件搜索
     * @param record
     * @param condition
     * @param bounds
     * @return
     */
    List<T> scondition(@Param("record") T record, @Param("condition") String condition, PageBounds bounds );

    /**
     * 数据抽样 / 随机获取一条记录
     *
     * @return Domain对象
     */
    T example();

    /**
     * 数据抽样 / 素锦获取n条记录
     *
     * @param n 返回记录数
     * @return Domain对象列表
     */
    List<T> nexample(int n);

    /**
     * 插入 / 主键冲突忽略
     * @param record
     * @return
     */
    int igsert(@Param("record") T record);

    /**
     * 插入 / 主键冲突更新
     * @param record
     * @return
     */
    int upsert(@Param("record") T record);

    /**
     * 批量插入 / 主键冲突更新
     * @param records
     * @return
     */
    int batupsert(@Param("records") List<T> records);

    /**
     * 批量插入 / 主键冲突忽略
     * @param records
     * @return
     */
    int batigsert(@Param("records") List<T> records);
}